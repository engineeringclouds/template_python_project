[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "template_python_project"
dynamic = ["version"]
description = "A modern Python project template with CI/CD, security scanning, and best practices."
authors = [
    { name = "Karl Cooke", email = "karl.cooke@engineeringclouds.io" }
]
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent"
]
keywords = ["template", "python", "project", "boilerplate", "ci-cd", "github-actions"]
# Add your runtime dependencies here, e.g. "requests>=2.0.0"
dependencies = [

]

[project.urls]
"Homepage" = "https://github.com/engineeringclouds/template_python_project"
"Documentation" = "https://engineeringclouds.github.io/template_python_project/"
"Source" = "https://github.com/engineeringclouds/template_python_project"
"Tracker" = "https://github.com/engineeringclouds/template_python_project/issues"
"Template" = "https://github.com/engineeringclouds/template_python_project/generate"

[project.optional-dependencies]
dev = [
    "black",
    "ruff",
    "mypy",
    "pytest",
    "pytest-cov",
    "pre-commit",
    "python-semantic-release",
    "build"
]

# Black: Code formatter configuration
[tool.black]
line-length = 88
target-version = ["py313"]

# Ruff: Linter and import sorter configuration
[tool.ruff]
line-length = 88
target-version = "py313"
select = ["E", "F", "I"]  # E: pycodestyle errors, F: pyflakes, I: isort

# Pytest: Test runner configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "tests"
]
pythonpath = ["src"]

# Mypy: Static type checker configuration
[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
strict_equality = true
show_error_codes = true
pretty = true

# Entry points: CLI command configuration (uncomment and edit if needed)
#[project.scripts]
#template-python-project = "template_python_project.cli:main"

# Setuptools configuration for dynamic versioning
[tool.setuptools.dynamic]
version = {attr = "template_python_project.__version__"}

# Python Semantic Release configuration
[tool.semantic_release]
version_variables = [
    "src/template_python_project/__init__.py:__version__",
]
build_command = "python -m pip install build && python -m build"
dist_path = "dist/"
upload_to_vcs_release = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^chore",
    "^ci",
    "^docs",
    "^style",
    "^refactor",
    "^test",
    "Merge pull request .*"
]

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_message]
# Use Angular commit message format
# feat: A new feature
# fix: A bug fix
# docs: Documentation only changes
# style: Changes that do not affect the meaning of the code
# refactor: A code change that neither fixes a bug nor adds a feature
# perf: A code change that improves performance
# test: Adding missing tests or correcting existing tests
# chore: Changes to the build process or auxiliary tools
default = "chore(release): {version}\n\n{changelog}"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
