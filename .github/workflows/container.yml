name: Container

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - "Dockerfile"
      - "src/**"
      - "pyproject.toml"
      - ".dockerignore"
      - ".github/workflows/ci.yml"

jobs:
  # Wait for CI workflow to complete successfully
  wait-for-ci:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Wait for CI workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          commit_sha="${{ github.event.pull_request.head.sha }}"
          echo "Waiting for CI workflow to complete for commit: $commit_sha"

          max_attempts=60  # 10 minutes (60 * 10 seconds)
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            echo "Attempt $((attempt + 1))/$max_attempts: Checking CI workflow status..."

            # Get the CI workflow runs for this commit
            workflow_runs=$(gh api "/repos/${{ github.repository }}/actions/workflows/ci.yml/runs" \
              --jq ".workflow_runs[] | select(.head_sha == \"$commit_sha\")")

            if [ -z "$workflow_runs" ]; then
              echo "No CI workflow runs found for this commit yet, waiting..."
              sleep 10
              attempt=$((attempt + 1))
              continue
            fi

            # Check if any CI run for this commit has completed
            completed_runs=$(echo "$workflow_runs" | jq -r 'select(.status == "completed")')

            if [ -n "$completed_runs" ]; then
              # Get the conclusion of the most recent completed run
              conclusion=$(echo "$completed_runs" | jq -r '.conclusion' | head -n1)
              echo "CI workflow completed with conclusion: $conclusion"

              if [ "$conclusion" = "success" ]; then
                echo "CI workflow completed successfully!"
                exit 0
              else
                echo "CI workflow failed with conclusion: $conclusion"
                exit 1
              fi
            else
              echo "CI workflow is still running, waiting..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

          echo "Timeout waiting for CI workflow to complete"
          exit 1

  # Check if CI workflow was successful (for workflow_run trigger)
  check-ci-success:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      ci-success: ${{ steps.check.outputs.success }}
    steps:
      - name: Check CI workflow success
        id: check
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "CI workflow completed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "CI workflow failed, skipping container build"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: [wait-for-ci, check-ci-success]
    if: |
      always() && (
        (github.event_name == 'pull_request' && needs.wait-for-ci.result == 'success') ||
        (github.event_name == 'workflow_run' && needs.check-ci-success.outputs.ci-success == 'true')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: template-python-project:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm template-python-project:latest

      - name: Test Docker image with custom command
        run: |
          docker run --rm template-python-project:latest python -c "from template_python_project import hello; print(f'Test: {hello()}')"

  security-scan:
    runs-on: ubuntu-latest
    needs: [wait-for-ci, check-ci-success, build]
    if: |
      always() && needs.build.result == 'success' && (
        (github.event_name == 'pull_request' && needs.wait-for-ci.result == 'success') ||
        (github.event_name == 'workflow_run' && needs.check-ci-success.outputs.ci-success == 'true')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: docker build -t template-python-project:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "template-python-project:scan"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
