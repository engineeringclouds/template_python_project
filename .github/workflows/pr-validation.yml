name: PR Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  # CI Job - Tests, linting, type checking across multiple OS
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m venv .venv
        shell: bash

      - name: Activate venv and install (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Activate venv and install (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\Activate.ps1
          pip install --upgrade pip
          pip install -e ".[dev]"
        shell: pwsh

      - name: Lint with Ruff (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          ruff check src/

      - name: Lint with Ruff (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\Activate.ps1
          ruff check src/
        shell: pwsh

      - name: Format with Black (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          black --check src/

      - name: Format with Black (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\Activate.ps1
          black --check src/
        shell: pwsh

      - name: Type check with mypy (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          mypy src/

      - name: Type check with mypy (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\Activate.ps1
          mypy src/
        shell: pwsh

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          pytest --cov=src --cov-report=xml

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\Activate.ps1
          pytest --cov=src --cov-report=xml
        shell: pwsh

  # Container Job - Only runs after CI passes
  container:
    runs-on: ubuntu-latest
    needs: ci # This ensures container only runs after ALL ci matrix jobs succeed
    if: success() # Extra safety check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          push: false
          tags: template-python-project:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm template-python-project:latest

      - name: Test Docker image with custom command
        run: |
          docker run --rm template-python-project:latest python -c "from template_python_project.main import hello; print(f'Test: {hello()}')"

  # Security Scan Job - Only runs after container job succeeds
  security-scan:
    runs-on: ubuntu-latest
    needs: container # Depends only on container job, which already depends on CI
    if: success() # Extra safety check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: docker build -t template-python-project:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "template-python-project:scan"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
