name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_level:
        description: 'Force a specific version bump (patch, minor, major, prerelease)'
        required: false
        default: 'none'
        type: choice
        options:
          - 'none'
          - patch
          - minor
          - major
          - prerelease
      prerelease:
        description: 'Create a prerelease'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Perform a dry run (no actual release)'
        required: false
        default: false
        type: boolean

# Prevent concurrent releases
concurrency:
  group: ${{ github.workflow }}-release-${{ github.ref_name }}
  cancel-in-progress: false

# Default: least privileged permissions across all jobs
permissions:
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write
      pull-requests: read

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
      commit_sha: ${{ steps.release.outputs.commit_sha }}
      release_notes: ${{ steps.release.outputs.release_notes }}

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Setup | Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Setup | Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running.
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Action | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          force: ${{ github.event.inputs.force_level != 'none' && github.event.inputs.force_level || '' }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' || false }}
          no_operation_mode: ${{ github.event.inputs.dry_run == 'true' || false }}

      - name: Build | Create Distribution Packages
        if: steps.release.outputs.released == 'true' || github.event.inputs.dry_run == 'true'
        run: |
          # Build packages to verify template produces valid Python packages
          python -m pip install --upgrade build
          python -m build

          # Verify package metadata
          python -m pip install --upgrade twine
          twine check dist/*

      - name: Upload | Build Artifacts
        if: steps.release.outputs.released == 'true' || github.event.inputs.dry_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-distribution-artifacts
          path: dist/
          retention-days: 7 # Shorter retention for template verification

      - name: Publish | Upload to GitHub Release Assets
        if: steps.release.outputs.released == 'true' && github.event.inputs.dry_run != 'true'
        uses: python-semantic-release/publish-action@v10.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Notify | Release Summary
        if: always()
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Released | ${{ steps.release.outputs.released }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ steps.release.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tag | ${{ steps.release.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit SHA | ${{ steps.release.outputs.commit_sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dry Run | ${{ github.event.inputs.dry_run }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.release.outputs.released }}" == "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Release Notes" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.release.outputs.release_notes }}" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && needs.release.outputs.released == 'true' && github.event.inputs.dry_run != 'true'

    steps:
      - name: Notify | Create Release Announcement
        run: |
          echo "🎉 Successfully released version ${{ needs.release.outputs.version }}!"
          echo "📦 Template Package: Verified builds successfully"
          echo "🏷️ GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }}"
          echo "📋 Use this template: ${{ github.server_url }}/${{ github.repository }}/generate"

  template-validation:
    name: Validate Template Usage
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true' && github.event.inputs.dry_run != 'true'

    steps:
      - name: Test | Template Generation
        run: |
          echo "✅ Template ready for use"
          echo "📚 Documentation: ${{ github.server_url }}/${{ github.repository }}/blob/main/README.md"
          echo "🔧 Configuration: ${{ github.server_url }}/${{ github.repository }}/blob/main/docs/github-configuration.md"
          echo "🚀 Releases: ${{ github.server_url }}/${{ github.repository }}/blob/main/docs/release-workflow.md"
